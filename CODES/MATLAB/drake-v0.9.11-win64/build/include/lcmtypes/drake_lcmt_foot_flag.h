/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <stdint.h>
#include <stdlib.h>
#include <lcm/lcm_coretypes.h>
#include <lcm/lcm.h>

#ifndef _drake_lcmt_foot_flag_h
#define _drake_lcmt_foot_flag_h

#ifdef __cplusplus
extern "C" {
#endif

typedef struct _drake_lcmt_foot_flag drake_lcmt_foot_flag;
struct _drake_lcmt_foot_flag
{
    int64_t    timestamp;
    int8_t     right;
    int8_t     left;
};

drake_lcmt_foot_flag   *drake_lcmt_foot_flag_copy(const drake_lcmt_foot_flag *p);
void drake_lcmt_foot_flag_destroy(drake_lcmt_foot_flag *p);

typedef struct _drake_lcmt_foot_flag_subscription_t drake_lcmt_foot_flag_subscription_t;
typedef void(*drake_lcmt_foot_flag_handler_t)(const lcm_recv_buf_t *rbuf,
             const char *channel, const drake_lcmt_foot_flag *msg, void *user);

int drake_lcmt_foot_flag_publish(lcm_t *lcm, const char *channel, const drake_lcmt_foot_flag *p);
drake_lcmt_foot_flag_subscription_t* drake_lcmt_foot_flag_subscribe(lcm_t *lcm, const char *channel, drake_lcmt_foot_flag_handler_t f, void *userdata);
int drake_lcmt_foot_flag_unsubscribe(lcm_t *lcm, drake_lcmt_foot_flag_subscription_t* hid);
int drake_lcmt_foot_flag_subscription_set_queue_capacity(drake_lcmt_foot_flag_subscription_t* subs,
                              int num_messages);


int  drake_lcmt_foot_flag_encode(void *buf, int offset, int maxlen, const drake_lcmt_foot_flag *p);
int  drake_lcmt_foot_flag_decode(const void *buf, int offset, int maxlen, drake_lcmt_foot_flag *p);
int  drake_lcmt_foot_flag_decode_cleanup(drake_lcmt_foot_flag *p);
int  drake_lcmt_foot_flag_encoded_size(const drake_lcmt_foot_flag *p);

// LCM support functions. Users should not call these
int64_t __drake_lcmt_foot_flag_get_hash(void);
int64_t __drake_lcmt_foot_flag_hash_recursive(const __lcm_hash_ptr *p);
int     __drake_lcmt_foot_flag_encode_array(void *buf, int offset, int maxlen, const drake_lcmt_foot_flag *p, int elements);
int     __drake_lcmt_foot_flag_decode_array(const void *buf, int offset, int maxlen, drake_lcmt_foot_flag *p, int elements);
int     __drake_lcmt_foot_flag_decode_array_cleanup(drake_lcmt_foot_flag *p, int elements);
int     __drake_lcmt_foot_flag_encoded_array_size(const drake_lcmt_foot_flag *p, int elements);
int     __drake_lcmt_foot_flag_clone_array(const drake_lcmt_foot_flag *p, drake_lcmt_foot_flag *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
