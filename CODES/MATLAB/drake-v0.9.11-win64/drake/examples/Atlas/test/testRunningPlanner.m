function [sol,robot_vis,v,cdfkp] = testRunningPlanner(seed,stride_length,major_iteration_limit, suffix,options)
  checkDependency('lcmgl');
  if nargin < 1, seed = []; end
  if (nargin < 2 || isempty(stride_length)), stride_length = 2; end
  if (nargin < 3 || isempty(major_iteration_limit)), major_iteration_limit = 200; end
  if (nargin < 4 || isempty(suffix)), suffix = 'testRunning'; end
  if (nargin < 5 || isempty(options))
    options = defaultOptionsStruct();
  else
    options = parseOptionsStruct(options);
  end

  % Construct RigidBodyManipulator
  w = warning('off','Drake:RigidBody:SimplifiedCollisionGeometry');
  warning('off','Drake:RigidBody:NonPositiveInertiaMatrix');
  warning('off','Drake:RigidBodyManipulator:UnsupportedContactPoints');
  warning('off','Drake:RigidBodyManipulator:UnsupportedVelocityLimits');
  options.floating = true;
  options.terrain = RigidBodyFlatTerrain;
  atlas_urdf = [getDrakePath,'/examples/Atlas/urdf/atlas_convex_hull.urdf'];
  atlas_vis_urdf = [getDrakePath,'/examples/Atlas/urdf/atlas_minimal_contact.urdf'];
  robot = RigidBodyManipulator(atlas_urdf,options);
  robot = robot.replaceCollisionGeometryWithConvexHull(robot.findLinkId('l_hand'),1);
  robot = robot.replaceCollisionGeometryWithConvexHull(robot.findLinkId('r_hand'),1);
  robot = compile(robot);
  robot_vis = RigidBodyManipulator(atlas_vis_urdf,options);
  if options.add_obstacle
    %robot = addObstacle(robot,0.7*(stride_length/2));
    %robot_vis = addObstacle(robot_vis,0.7*(stride_length/2));
    robot = addObstacle(robot,0);
    robot_vis = addObstacle(robot_vis,0);
  end
  %mu = 1.16; % rubber on rubber
  mu = 1; % rubber on rubber
  warning(w);


  % Create convenience variables
  nq = robot.getNumPositions();
  %nv = robot.getNumVelocities();
  %world = robot.findLinkId('world');
  l_foot = robot.findLinkId('l_foot');
  r_foot = robot.findLinkId('r_foot');
  l_uleg = robot.findLinkId('l_uleg');
  r_uleg = robot.findLinkId('r_uleg');
  head = robot.findLinkId('head');
  neck_idx = robot.getBody(robot.findJointId('neck_ay')).position_num;
  freeze_idx = neck_idx;
  r_foot_bottom = robot.getBody(r_foot).getTerrainContactPoints();
  l_foot_toe    = robot.getBody(l_foot).getTerrainContactPoints('toe');
  l_foot_heel   = robot.getBody(l_foot).getTerrainContactPoints('heel');
  %arm_idx = findPositionIndices(robot,'arm');
  %leg_idx = findPositionIndices(robot,'leg');
  %back_idx = findPositionIndices(robot,'back');
  %wrist_idx = [findPositionIndices(robot,'uwy');findPositionIndices(robot,'mwx');findPositionIndices(robot,'ely');findPositionIndices(robot,'shx')];

  % Construct visualization tools
  v = constructVisualizer(robot_vis);

  % Load nominal data
  nomdata = load([getDrakePath(), '/examples/Atlas/data/atlas_fp.mat']);
  qstar = nomdata.xstar(1:nq);
  v.draw(0,qstar);
  q0 = qstar;
  q0(neck_idx) = 0;
  if options.start_from_standing
    assert(~isempty(options.stride_filename));
    S = load(options.stride_filename);
    options.q_apex = S.sol.q(:,end);
    options.comdot_apex = S.sol.comdot(:,end);
    qf = options.q_apex;
    qf(1) = qf(1)/2;
  elseif options.add_obstacle
    assert(~isempty(options.stride_filename));
    S = load(options.stride_filename);
    options.q_apex = S.sol.q(:,end);
    options.comdot_0 = S.sol.comdot(:,1);
    options.comdot_apex = S.sol.comdot(:,end);
    options.com_0 = S.sol.com(:,1);
    options.com_apex = S.sol.com(:,end);
    q0 = S.sol.q(:,1);
    %q0(1) = -stride_length/4;
    q0(1) = -1.2;
    qf = options.q_apex;
    qf(1) = 0.8;
    H0 = S.sol.H(:,1);
    Hf = S.sol.H(:,end);
    Hdot0 = S.sol.Hdot(:,1);
    Hdotf = S.sol.Hdot(:,end);
  else
    qf = q0;
    qf(1) = stride_length/2;
  end
  com_0 = robot.getCOM(q0);
  com_f = robot.getCOM(qf);

  % Set up time limits
  if options.start_from_standing
    N = 19;
  else
    %N = 16;
    N = options.N;
  end
  T = stride_length/2/options.speed;
  if options.start_from_standing
    tf_range = [0,10*T];
    h_min = 1/(2*N)*T; h_max_stance = 2/N*T; h_max_flight = 2/N*T;
  elseif options.add_obstacle
    tf_range = [0,10*T];
    h_min = 1/(2*N)*T; h_max_stance = 2/N*T; h_max_flight = 2/N*T;
  else
    tf_range = T*[1,1];
    h_min = 3/(4*N)*T; h_max_stance = 3/(2*N)*T; h_max_flight = 2/N*T;
  end

  % Set up cost variables
  q_nom = bsxfun(@times,qstar,ones(1,N));
  Q = eye(nq);
  Q(1,1) = 0;
  Q(2,2) = 0;
  Q(6,6) = 0;
  Qv = 1e0*eye(nq);
  %Qv(arm_idx,arm_idx) = 1e1*eye(numel(arm_idx));
  Q_comddot = diag([1,1,1]);
  Q_contact_force = 0e-4*eye(3);

  % Create collision avoidance constraints
  if options.enable_collision
    % Consider all bodies
    min_distance_constraint.flight = MinDistanceConstraint(robot,options.min_distance);
    if options.start_from_standing
      % Ignore both feet
      active_collision_options.body_idx = setdiff(1:robot.getNumBodies(),[l_foot,r_foot,l_uleg,r_uleg]);
      min_distance_constraint.double_stance = MinDistanceConstraint(robot,options.min_distance,active_collision_options);
      % Ignore left foot
      active_collision_options.body_idx = setdiff(1:robot.getNumBodies(),[l_foot]);
      min_distance_constraint.stance = MinDistanceConstraint(robot,options.min_distance,active_collision_options);
    else
      % Ignore left foot
      active_collision_options.body_idx = setdiff(1:robot.getNumBodies(),l_foot);
      min_distance_constraint.stance = MinDistanceConstraint(robot,options.min_distance,active_collision_options);
    end
    if options.n_interp_points > 0
      interp_min_distance_constraint.flight = ...
        generateInterpolatedMinDistanceConstraint(min_distance_constraint.stance,(1:options.n_interp_points)/(options.n_interp_points+1));
      interp_min_distance_constraint.stance = ...
        generateInterpolatedMinDistanceConstraint(min_distance_constraint.stance,(1:options.n_interp_points)/(options.n_interp_points+1));
      if options.start_from_standing
        interp_min_distance_constraint.double_stance = ...
          generateInterpolatedMinDistanceConstraint(min_distance_constraint.double_stance,(1:options.n_interp_points)/(options.n_interp_points+1));
      end
    end
  end

  % Create gaze constraint
  if options.constrain_head_gaze
    gaze_constraint = WorldGazeDirConstraint(robot,head,[1;0;0],[1;0;0],options.head_gaze_tol);
  end

  % Set up linearized friction cone edges
  num_edges = 3;
  FC_angles = linspace(0,2*pi,num_edges+1);FC_angles(end) = [];
  FC_axis = [0;0;1];
  FC_perp1 = rotx(pi/2)*FC_axis;
  FC_perp2 = cross(FC_axis,FC_perp1);
  FC_edge = bsxfun(@plus,FC_axis,mu*(bsxfun(@times,cos(FC_angles),FC_perp1) + ...
    bsxfun(@times,sin(FC_angles),FC_perp2)));
  FC_edge = robot.getMass()*norm(robot.getGravity)*bsxfun(@rdivide,FC_edge,sqrt(sum(FC_edge.^2,1)));

  % Create stance constraints
  if options.start_from_standing
      in_stance.right = 1:11;
      in_stance.toe  = 1:17;
      in_stance.heel = 1:14;
  else
    in_stance.right = [];
    if options.toe_first
      in_stance.toe = 5:13;
      in_stance.heel = 8:10;
    else
      %in_stance.toe = 5:13;
      %in_stance.heel = 5:10;
      touch_down_idx = ceil(N/4);
      heel_off_idx = ceil(3*N/4);
      toe_off_idx = ceil(4*N/5);
      in_stance.toe = touch_down_idx:toe_off_idx;
      in_stance.heel = touch_down_idx:heel_off_idx;
    end
  end
  in_stance.left = union(in_stance.toe,in_stance.heel);
  in_stance.left = setdiff(in_stance.left,in_stance.right);
  in_stance.total = union(in_stance.left,in_stance.right);
  in_stance.double = intersect(in_stance.left,in_stance.right);
  in_flight = setdiff(1:N,in_stance.total);

  contact_wrench_struct(1).active_knot = in_stance.toe(2:end);
  contact_wrench_struct(1).cw = ...
    LinearFrictionConeWrench(robot,l_foot,l_foot_toe,FC_edge);
  contact_wrench_struct(2).active_knot = in_stance.heel(2:end);
  contact_wrench_struct(2).cw = ...
    LinearFrictionConeWrench(robot,l_foot,l_foot_heel,FC_edge);
  if options.start_from_standing
    contact_wrench_struct(3).active_knot = in_stance.right;
    contact_wrench_struct(3).cw = ...
      LinearFrictionConeWrench(robot,r_foot,r_foot_bottom,FC_edge);
  end

  % Kinematic constraints
  lb = repmat([NaN; NaN; 0],1,2);
  ub = repm                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                atrix = addOpposite(equal_matrix,3,base_roll);

  base_pitch = 5;
  equal_matrix = addEquality(equal_matrix,4,base_pitch);

  base_yaw = 6;
  equal_matrix = addOpposite(equal_matrix,5,base_yaw);

  back_bkz = robot.getBody(robot.findJointId('back_bkz')).position_num;
  equal_matrix = addOpposite(equal_matrix,6,back_bkz);

  back_bky = robot.getBody(robot.findJointId('back_bky')).position_num;
  equal_matrix = addEquality(equal_matrix,7,back_bky);

  back_bkx = robot.getBody(robot.findJointId('back_bkx')).position_num;
  equal_matrix = addOpposite(equal_matrix,8,back_bkx);

  lb = zeros(2*num_symmetry+num_equal,1);
  ub = lb;
  half_periodic_constraint = LinearConstraint(lb,ub,[symmetric_matrix;equal_matrix]);
end

function displayCallback(in_stance,N,x)
  h = x(1:N-1);
  ts = [0;cumsum(h)];
  com_z = x(N-1+(1:N));
  comdot_x = x(2*N-1+(1:N));
  q = reshape(x(3*N:end),[],N);
  x_data = [zeros(2,numel(ts));q;0*q];
  utime = now() * 24 * 60 * 60;
  snopt_info_vector = ones(1, size(x_data,2));
  sfigure(7);
  subplot(2,1,1);
  plot(ts,com_z,'bo-');
  hold on
  plot(ts(in_stance),com_z(in_stance),'ro-');
  title('COM Height')
  xlabel('t (s)')
  ylabel('z (m)')
  hold off
  subplot(2,1,2);
  plot(ts,comdot_x,'bo-');
  hold on
  plot(ts(in_stance),comdot_x(in_stance),'ro-');
  title('COM velocity')
  xlabel('t (s)')
  ylabel('xdot (m/s)')
  hold off
  drawnow;
end

function robot = addObstacle(robot,obstacle_x_position)
  radius = 0.1;
  len = 5;
  height = 1;
  beam = RigidBodyCapsule(radius,len,[obstacle_x_position,-1,height],[4*pi/6;0;0]);
  wall1 = RigidBodyBox(2*[0.1; 1.235; 1.0],[obstacle_x_position-0.2,-0.565-1,1],[0;0;0]);
  wall2 = RigidBodyBox(2*[0.1; 0.15; 1.0],[obstacle_x_position-0.2,1.65-1,1],[0;0;0]);
  wall3 = RigidBodyBox(2*[0.1; 1.8; 0.25],[obstacle_x_position-0.2,0-1,2.25],[0;0;0]);
  robot = robot.addGeometryToBody('world',beam);
  robot = robot.addGeometryToBody('world',wall1);
  robot = robot.addGeometryToBody('world',wall2);
  robot = robot.addGeometryToBody('world',wall3);
  robot = compile(robot);
end

function options = defaultOptionsStruct()
  options.visualize = true;
  options.toe_first = false;
  options.n_interp_points = 0;
  options.speed = 2;
  options.constrain_head_gaze = true;
  options.head_gaze_tol = 15*pi/180;
  options.freeze_neck = true;
  options.start_from_standing = false;
  options.stride_filename = 'results_ss_1p5m_2mps_22knots_A.mat';
  options.enable_collision = true;
  options.enable_velocity_limits = false;
  options.add_obstacle = false;
  options.min_distance = 0.03;
  options.N = 16;
  options.time_option = 2;
  options.joint_tol = 10*pi/180;
  options.com_tol = 0.1;
end

function options = parseOptionsStruct(options_in)
  options = defaultOptionsStruct();
  for fieldname_cell = fields(options_in)'
    fieldname = fieldname_cell{1};
    if isfield(options,fieldname)
      options.(fieldname) = options_in.(fieldname);
    end
  end
end
